using System.Text.RegularExpressions;
using iText.Kernel.Pdf;
using iText.Kernel.Pdf.Canvas.Parser;
using iText.Kernel.Pdf.Canvas.Parser.Listener;
using SmartFin.Interfaces;
using SmartFin.Entities;
using SmartFin.Services;
using SmartFin.DTOs.Transaction;
using SmartFin.DTOs.Category;
using Smartfin.Extensions;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using SmartFin.DTOs.Expense;

namespace SmartFin.Parsers
{
    public class YandexBankStatementParser : IBankStatementParser
    {
        private readonly TransactionService _transactionService;
        private readonly CategoryService _categoryService;
        private readonly int _userId;

        private Dictionary<string, int?> _categoryCache = new Dictionary<string, int?>();

        public YandexBankStatementParser(TransactionService transactionService, CategoryService categoryService, int userId)
        {
            _transactionService = transactionService;
            _categoryService = categoryService;
            _userId = userId;
        }

        public async Task<IEnumerable<TransactionDto>> ParseAndImportAsync(Stream fileStream)
        {
            var importedTransactions = new List<TransactionDto>();
            await InitializeCategories();

            try
            {
                string fullText = ExtractTextFromPdf(fileStream);
                var transactions = ParseYandexFormat(fullText);

                foreach (var transaction in transactions)
                {
                    try
                    {
                        var createdId = await _transactionService.CreateUserTransaction(transaction);
                        if (createdId > 0)
                        {
                            var createdTransaction = await _transactionService.GetTransactionById(createdId);
                            if (createdTransaction != null)
                            {
                                importedTransactions.Add(createdTransaction.asDto());
                                Console.WriteLine($"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction.Date:d}, {transaction.sum}, {transaction.Name}");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {ex.Message}");
                    }
                }

                if (transactions.Count == 0)
                {
                    Console.WriteLine("‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—ã–ø–∏—Å–∫–∏: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
            }

            return importedTransactions;
        }

        private List<CreateTransactionDto> ParseYandexFormat(string text)
        {
            var transactions = new List<CreateTransactionDto>();
            var lines = text.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

            Console.WriteLine("üîé –û—Ç–ª–∞–¥–∫–∞: –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–ø–∏—Å–∫–∏:");
            for (int i = 0; i < Math.Min(lines.Length, 30); i++)
            {
                Console.WriteLine($"[{i}] {lines[i]}");
            }

            for (int i = 0; i < lines.Length - 3; i++)
            {
                string description = lines[i].Trim();
                string dateLine = lines[i + 1].Trim();
                string timeLine = lines[i + 2].Trim();
                string amountLine = lines[i + 3].Trim();

                Console.WriteLine($"\nüîç –ë–ª–æ–∫ {i}:");
                Console.WriteLine($"–û–ø–∏—Å–∞–Ω–∏–µ: {description}");
                Console.WriteLine($"–î–∞—Ç–∞: {dateLine}");
                Console.WriteLine($"–í—Ä–µ–º—è: {timeLine}");
                Console.WriteLine($"–°—É–º–º–∞: {amountLine}");

                if (!Regex.IsMatch(dateLine, @"^\d{2}\.\d{2}\.\d{4}$") ||
                    !Regex.IsMatch(timeLine, @"^–≤\s+\d{2}:\d{2}$") ||
                    !Regex.IsMatch(amountLine, @"[+\-‚Äì‚àí]?\s*\d[\d\s]*,\d{2}\s*‚ÇΩ"))
                {
                    Console.WriteLine("‚ùå –ë–ª–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É");
                    continue;
                }

                try
                {
                    var dateTimeStr = $"{dateLine} {timeLine.Replace("–≤", "").Trim()}";
                    if (!DateTime.TryParseExact(dateTimeStr, "dd.MM.yyyy HH:mm", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateTime))
                    {
                        Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è");
                        continue;
                    }

                    var amountMatch = Regex.Match(amountLine, @"([+\-‚Äì‚àí]?\s*\d[\d\s]*,\d{2})");
                    if (!amountMatch.Success)
                    {
                        Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É");
                        continue;
                    }

                    var amountStr = amountMatch.Groups[1].Value
                        .Replace("‚Äì", "-")
                        .Replace("‚àí", "-")
                        .Replace(" ", "")
                        .Replace(",", ".");

                    if (!decimal.TryParse(amountStr, NumberStyles.Any, CultureInfo.InvariantCulture, out decimal amount))
                    {
                        Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É: {amountStr}");
                        continue;
                    }

                    var transaction = new CreateTransactionDto
                    {
                        Name = description,
                        Date = dateTime,
                        sum = amount,
                        UserId = _userId,
                        CategoryId = DetermineCategory(description)
                    };

                    transactions.Add(transaction);
                    Console.WriteLine($"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction.Date:d}, {transaction.sum}, {transaction.Name}");

                    i += 3; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–ª–æ–∫–∞: {ex.Message}");
                }
            }

            return transactions;
        }

        private string ExtractTextFromPdf(Stream pdfStream)
        {
            var text = new StringBuilder();

            using (var reader = new PdfReader(pdfStream))
            using (var document = new PdfDocument(reader))
            {
                for (int i = 1; i <= document.GetNumberOfPages(); i++)
                {
                    var strategy = new SimpleTextExtractionStrategy();
                    var pageText = PdfTextExtractor.GetTextFromPage(document.GetPage(i), strategy);
                    text.AppendLine(pageText);
                }
            }

            return text.ToString();
        }

        private async Task InitializeCategories()
        {
            var categories = await _categoryService.GetUserCategoriesAsync(_userId);

            foreach (var category in categories)
            {
                _categoryCache[category.name.ToLower()] = category.id;
            }

            var defaultCategories = new Dictionary<string, string>
            {
                { "–ø—Ä–æ–¥—É–∫—Ç—ã", "–ü—Ä–æ–¥—É–∫—Ç—ã" },
                { "–∞–ø—Ç–µ–∫–∞", "–ê–ø—Ç–µ–∫–∏" },
                { "–ø–µ—Ä–µ–≤–æ–¥—ã", "–ü–µ—Ä–µ–≤–æ–¥—ã" },
                { "—Ç–∞–∫—Å–∏", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç" },
                { "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã" },
                { "–º–∞–≥–∞–∑–∏–Ω—ã", "–ü–æ–∫—É–ø–∫–∏" }
            };

            foreach (var pair in defaultCategories)
            {
                if (!_categoryCache.ContainsKey(pair.Key))
                {
                    try
                    {
                        var categoryDto = new CategoryDTO { name = pair.Value };
                        var newCategory = await _categoryService.CreateCategoryAsync(categoryDto, _userId);
                        _categoryCache[pair.Key] = newCategory.id;
                        _categoryCache[pair.Value.ToLower()] = newCategory.id;
                    }
                    catch (Exception) { }
                }
            }
        }

        private int? DetermineCategory(string description)
        {
            description = description.ToLower();

            var mappings = new Dictionary<string, string>
            {
                { "pyaterochka", "–ø—Ä–æ–¥—É–∫—Ç—ã" },
                { "magnit", "–ø—Ä–æ–¥—É–∫—Ç—ã" },
                { "krasnoe", "–ø—Ä–æ–¥—É–∫—Ç—ã" },
                { "apteka", "–∞–ø—Ç–µ–∫–∞" },
                { "yandex", "–º–∞–≥–∞–∑–∏–Ω—ã" },
                { "–ø–µ—Ä–µ–≤–æ–¥", "–ø–µ—Ä–µ–≤–æ–¥—ã" },
                { "tinkoff", "–ø–µ—Ä–µ–≤–æ–¥—ã" },
                { "sbp", "–ø–µ—Ä–µ–≤–æ–¥—ã" }
            };

            foreach (var kv in mappings)
            {
                if (description.Contains(kv.Key))
                    return _categoryCache.TryGetValue(kv.Value, out int? catId) ? catId : null;
            }

            return _categoryCache.TryGetValue("–º–∞–≥–∞–∑–∏–Ω—ã", out int? defCatId) ? defCatId : null;
        }
    }
}
